{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ptums/Sites/movie-site/pages/movie/[id].js\",\n    _s = $RefreshSig$();\n\nimport { useRouter } from 'next/router';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport Head from 'next/head'; // create a connection between the prismic js library and my apps api on prismic.io\n\nexport var __N_SSG = true;\nexport default function Movie(_ref) {\n  _s();\n\n  var movie = _ref.movie;\n  var router = useRouter(); // If the page is not yet generated, this will be displayed\n  // initially until getStaticProps() finishes running\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: movie.movie_title.value[0].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        cname: \"description\",\n        content: movie.description.value[0].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Everything in \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: 'green'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }, this), \" is data from the database\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'green'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: movie.movie_title.value[0].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Description: \", movie.description.value[0].text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        src: movie.poster.value.main.url,\n        alt: movie.movie_title.value[0].text,\n        height: movie.poster.value.main.dimensions.height,\n        width: movie.poster.value.main.dimensions.width\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Movie, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Movie;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"sources":["/Users/ptums/Sites/movie-site/pages/movie/[id].js"],"names":["useRouter","Image","Link","Head","Movie","movie","router","isFallback","movie_title","value","text","description","color","poster","main","url","dimensions","height","width"],"mappings":";;;;;;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;;;AAIA,eAAe,SAASC,KAAT,OAA0B;AAAA;;AAAA,MAATC,KAAS,QAATA,KAAS;AACvC,MAAMC,MAAM,GAAGN,SAAS,EAAxB,CADuC,CAGvC;AACA;;AACA,MAAIM,MAAM,CAACC,UAAX,EAAuB;AACrB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACJ,QAAC,IAAD;AAAA,8BACQ;AAAA,kBAAQF,KAAK,CAACG,WAAN,CAAkBC,KAAlB,CAAwB,CAAxB,EAA2BC;AAAnC;AAAA;AAAA;AAAA;AAAA,cADR,eAEQ;AAAM,QAAA,KAAK,EAAC,aAAZ;AAA0B,QAAA,OAAO,EAAEL,KAAK,CAACM,WAAN,CAAkBF,KAAlB,CAAwB,CAAxB,EAA2BC;AAA9D;AAAA;AAAA;AAAA;AAAA,cAFR;AAAA;AAAA;AAAA;AAAA;AAAA,YADI,eAKE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF,eAUE;AAAA,gDAAkB;AAAM,QAAA,KAAK,EAAE;AAACE,UAAAA,KAAK,EAAE;AAAR,SAAb;AAAA,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA/B;AAAA;AAAA;AAAA;AAAA,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAK,MAAA,KAAK,EAAE;AAACA,QAAAA,KAAK,EAAE;AAAR,OAAZ;AAAA,8BACE;AAAA,kBAAKP,KAAK,CAACG,WAAN,CAAkBC,KAAlB,CAAwB,CAAxB,EAA2BC;AAAhC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,+BAAG;AAAA,sCAAsBL,KAAK,CAACM,WAAN,CAAkBF,KAAlB,CAAwB,CAAxB,EAA2BC,IAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,cAFF,eAGA,QAAC,KAAD;AACC,QAAA,GAAG,EAAEL,KAAK,CAACQ,MAAN,CAAaJ,KAAb,CAAmBK,IAAnB,CAAwBC,GAD9B;AAEC,QAAA,GAAG,EAAEV,KAAK,CAACG,WAAN,CAAkBC,KAAlB,CAAwB,CAAxB,EAA2BC,IAFjC;AAGC,QAAA,MAAM,EAAEL,KAAK,CAACQ,MAAN,CAAaJ,KAAb,CAAmBK,IAAnB,CAAwBE,UAAxB,CAAmCC,MAH5C;AAIC,QAAA,KAAK,EAAEZ,KAAK,CAACQ,MAAN,CAAaJ,KAAb,CAAmBK,IAAnB,CAAwBE,UAAxB,CAAmCE;AAJ3C;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA,kBADF;AAyBD;;GAlCuBd,K;UACPJ,S;;;KADOI,K;AAkDvB","sourcesContent":["const Prismic = require('@prismicio/client');\nimport { useRouter } from 'next/router'\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport Head from 'next/head';\n\n// create a connection between the prismic js library and my apps api on prismic.io\nconst apiEndpoint = \"https://my-first-app1.prismic.io/api\";\nconst client = Prismic.client(apiEndpoint);\n\nexport default function Movie({ movie }) {\n  const router = useRouter()\n\n  // If the page is not yet generated, this will be displayed\n  // initially until getStaticProps() finishes running\n  if (router.isFallback) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <>\n<Head>\n        <title>{movie.movie_title.value[0].text}</title>\n        <meta cname=\"description\" content={movie.description.value[0].text} />\n      </Head>\n      <Link href=\"/\">\n        <a>\n          Home\n        </a>\n      </Link>\n      <h3>Everything in <span style={{color: 'green'}}><u>green</u></span> is data from the database</h3>\n      <div style={{color: 'green'}}>\n        <h2>{movie.movie_title.value[0].text}</h2>\n        <p><strong>Description: {movie.description.value[0].text}</strong></p>\n      <Image\n       src={movie.poster.value.main.url}\n       alt={movie.movie_title.value[0].text}\n       height={movie.poster.value.main.dimensions.height}\n       width={movie.poster.value.main.dimensions.width}\n      /> \n\n      </div>\n    </>\n  )\n}\n\nexport async function getStaticPaths() {\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.query(Prismic.Predicates.at('document.type', 'movies'))\n    .then(res => res.results);\n\n  // ill iterate over all the movies in the array\n  // then ill extract the ids and return an array of urls with the ids\n  // it'll look something like this [/movie/jkfdlsakjfkld, /movie/klsjiojrlwe]\n  const movieUrls = movieReq.map((movie) => `/movie/${movie.id}`);\n\n  return {\n    paths: movieUrls,\n    fallback: true\n  }\n};\n\nexport async function getStaticProps({ params }) {\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.getByID(params.id)\n    .then(res => res);\n  \n  return {\n    props: {\n      movie: movieReq.data.movies\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}