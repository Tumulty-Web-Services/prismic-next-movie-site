{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ptums/Sites/movie-site/pages/movie/[id].js\";\n\nconst Prismic = require('@prismicio/client');\n\nimport Image from 'next/image';\nimport Link from 'next/link'; // create a connection between the prismic js library and my apps api on prismic.io\n\nconst apiEndpoint = \"https://my-first-app1.prismic.io/api\";\nconst client = Prismic.client(apiEndpoint);\nexport default function Movie({\n  movie\n}) {\n  console.log(movie);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), \"Movie content here..\"]\n  }, void 0, true);\n}\nexport async function getStaticPaths() {\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.query(Prismic.Predicates.at('document.type', 'movies')).then(res => res.results); // ill iterate over all the movies in the array\n  // then ill extract the ids and return an array of urls with the ids\n  // it'll look something like this [/movie/jkfdlsakjfkld, /movie/klsjiojrlwe]\n\n  const movieUrls = movieReq.map(movie => `/movie/${movie.id}`);\n  console.log(movieUrls);\n  return {\n    paths: movieUrls,\n    fallback: true\n  };\n}\n;\nexport async function getStaticProps({\n  params\n}) {\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.getByID(params.id).then(res => res);\n  return {\n    props: {\n      movie: movieReq.data.movies\n    }\n  };\n}","map":{"version":3,"sources":["/Users/ptums/Sites/movie-site/pages/movie/[id].js"],"names":["Prismic","require","Image","Link","apiEndpoint","client","Movie","movie","console","log","getStaticPaths","movieReq","query","Predicates","at","then","res","results","movieUrls","map","id","paths","fallback","getStaticProps","params","getByID","props","data","movies"],"mappings":";;;;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAAvB;;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CACE;;AAEF,MAAMC,WAAW,GAAG,sCAApB;AACA,MAAMC,MAAM,GAAGL,OAAO,CAACK,MAAR,CAAeD,WAAf,CAAf;AAEA,eAAe,SAASE,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA0B;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAAA,kBADF;AAUD;AAED,OAAO,eAAeG,cAAf,GAAgC;AACrC;AACA,QAAMC,QAAQ,GAAG,MAAMN,MAAM,CAACO,KAAP,CAAaZ,OAAO,CAACa,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,QAAvC,CAAb,EACpBC,IADoB,CACfC,GAAG,IAAIA,GAAG,CAACC,OADI,CAAvB,CAFqC,CAKrC;AACA;AACA;;AACA,QAAMC,SAAS,GAAGP,QAAQ,CAACQ,GAAT,CAAcZ,KAAD,IAAY,UAASA,KAAK,CAACa,EAAG,EAA3C,CAAlB;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAYS,SAAZ;AACA,SAAO;AACLG,IAAAA,KAAK,EAAEH,SADF;AAELI,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID;AAAA;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA,QAAMb,QAAQ,GAAG,MAAMN,MAAM,CAACoB,OAAP,CAAeD,MAAM,CAACJ,EAAtB,EACpBL,IADoB,CACfC,GAAG,IAAIA,GADQ,CAAvB;AAGA,SAAO;AACLU,IAAAA,KAAK,EAAE;AACLnB,MAAAA,KAAK,EAAEI,QAAQ,CAACgB,IAAT,CAAcC;AADhB;AADF,GAAP;AAKD","sourcesContent":["const Prismic = require('@prismicio/client');\nimport Image from 'next/image';\nimport Link from 'next/link';\n  // create a connection between the prismic js library and my apps api on prismic.io\n\nconst apiEndpoint = \"https://my-first-app1.prismic.io/api\";\nconst client = Prismic.client(apiEndpoint);\n\nexport default function Movie({ movie }) {\n  console.log(movie);\n\n  return (\n    <>\n      <Link href=\"/\">\n        <a>\n          Home\n        </a>\n      </Link>\n      Movie content here..\n    </>\n  )\n}\n\nexport async function getStaticPaths() {\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.query(Prismic.Predicates.at('document.type', 'movies'))\n    .then(res => res.results);\n\n  // ill iterate over all the movies in the array\n  // then ill extract the ids and return an array of urls with the ids\n  // it'll look something like this [/movie/jkfdlsakjfkld, /movie/klsjiojrlwe]\n  const movieUrls = movieReq.map((movie) => `/movie/${movie.id}`);\n  console.log(movieUrls);\n  return {\n    paths: movieUrls,\n    fallback: true\n  }\n};\n\nexport async function getStaticProps({ params }) {\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.getByID(params.id)\n    .then(res => res);\n  \n  return {\n    props: {\n      movie: movieReq.data.movies\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}