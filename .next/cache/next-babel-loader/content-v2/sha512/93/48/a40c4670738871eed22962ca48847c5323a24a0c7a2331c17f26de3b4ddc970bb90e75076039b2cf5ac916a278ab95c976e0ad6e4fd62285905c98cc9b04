{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ptums/Sites/movie-site/pages/movie/[id].js\";\n\nconst Prismic = require('@prismicio/client');\n\nimport Image from 'next/image';\nimport Link from 'next/link'; // create a connection between the prismic js library and my apps api on prismic.io\n\nconst apiEndpoint = \"https://my-first-app1.prismic.io/api\";\nconst client = Prismic.client(apiEndpoint);\nexport default function Movie({\n  movie\n}) {\n  console.log(movie);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: movie.movie_title.value[0].text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Description: \", movie.description.value[0].text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Image, {\n      src: movie.poster.value.main.url,\n      alt: movie.movie_title.value[0].text,\n      height: movie.poster.value.main.dimensions.height,\n      width: movie.poster.value.main.dimensions.width\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\nexport async function getStaticPaths() {\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.query(Prismic.Predicates.at('document.type', 'movies')).then(res => res.results); // ill iterate over all the movies in the array\n  // then ill extract the ids and return an array of urls with the ids\n  // it'll look something like this [/movie/jkfdlsakjfkld, /movie/klsjiojrlwe]\n\n  const movieUrls = movieReq.map(movie => `/movie/${movie.id}`);\n  return {\n    paths: movieUrls,\n    fallback: true\n  };\n}\n;\nexport async function getStaticProps({\n  params\n}) {\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.getByID(params.id).then(res => res);\n  return {\n    props: {\n      movie: movieReq.data.movies\n    }\n  };\n}","map":{"version":3,"sources":["/Users/ptums/Sites/movie-site/pages/movie/[id].js"],"names":["Prismic","require","Image","Link","apiEndpoint","client","Movie","movie","console","log","movie_title","value","text","description","poster","main","url","dimensions","height","width","getStaticPaths","movieReq","query","Predicates","at","then","res","results","movieUrls","map","id","paths","fallback","getStaticProps","params","getByID","props","data","movies"],"mappings":";;;;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAAvB;;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CACE;;AAEF,MAAMC,WAAW,GAAG,sCAApB;AACA,MAAMC,MAAM,GAAGL,OAAO,CAACK,MAAR,CAAeD,WAAf,CAAf;AAEA,eAAe,SAASE,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA0B;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAA,gBAAKA,KAAK,CAACG,WAAN,CAAkBC,KAAlB,CAAwB,CAAxB,EAA2BC;AAAhC;AAAA;AAAA;AAAA;AAAA,YANF,eAOI;AAAA,6BAAG;AAAA,oCAAsBL,KAAK,CAACM,WAAN,CAAkBF,KAAlB,CAAwB,CAAxB,EAA2BC,IAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI,QAAC,KAAD;AACD,MAAA,GAAG,EAAEL,KAAK,CAACO,MAAN,CAAaH,KAAb,CAAmBI,IAAnB,CAAwBC,GAD5B;AAED,MAAA,GAAG,EAAET,KAAK,CAACG,WAAN,CAAkBC,KAAlB,CAAwB,CAAxB,EAA2BC,IAF/B;AAGD,MAAA,MAAM,EAAEL,KAAK,CAACO,MAAN,CAAaH,KAAb,CAAmBI,IAAnB,CAAwBE,UAAxB,CAAmCC,MAH1C;AAID,MAAA,KAAK,EAAEX,KAAK,CAACO,MAAN,CAAaH,KAAb,CAAmBI,IAAnB,CAAwBE,UAAxB,CAAmCE;AAJzC;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA,kBADF;AAiBD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,QAAQ,GAAG,MAAMhB,MAAM,CAACiB,KAAP,CAAatB,OAAO,CAACuB,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,QAAvC,CAAb,EACpBC,IADoB,CACfC,GAAG,IAAIA,GAAG,CAACC,OADI,CAAvB,CAFqC,CAKrC;AACA;AACA;;AACA,QAAMC,SAAS,GAAGP,QAAQ,CAACQ,GAAT,CAActB,KAAD,IAAY,UAASA,KAAK,CAACuB,EAAG,EAA3C,CAAlB;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAEH,SADF;AAELI,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID;AAAA;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA,QAAMb,QAAQ,GAAG,MAAMhB,MAAM,CAAC8B,OAAP,CAAeD,MAAM,CAACJ,EAAtB,EACpBL,IADoB,CACfC,GAAG,IAAIA,GADQ,CAAvB;AAGA,SAAO;AACLU,IAAAA,KAAK,EAAE;AACL7B,MAAAA,KAAK,EAAEc,QAAQ,CAACgB,IAAT,CAAcC;AADhB;AADF,GAAP;AAKD","sourcesContent":["const Prismic = require('@prismicio/client');\nimport Image from 'next/image';\nimport Link from 'next/link';\n  // create a connection between the prismic js library and my apps api on prismic.io\n\nconst apiEndpoint = \"https://my-first-app1.prismic.io/api\";\nconst client = Prismic.client(apiEndpoint);\n\nexport default function Movie({ movie }) {\n  console.log(movie);\n\n  return (\n    <>\n      <Link href=\"/\">\n        <a>\n          Home\n        </a>\n      </Link>\n      <h2>{movie.movie_title.value[0].text}</h2>\n        <p><strong>Description: {movie.description.value[0].text}</strong></p>\n        <Image\n       src={movie.poster.value.main.url}\n       alt={movie.movie_title.value[0].text}\n       height={movie.poster.value.main.dimensions.height}\n       width={movie.poster.value.main.dimensions.width}\n      /> \n    </>\n  )\n}\n\nexport async function getStaticPaths() {\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.query(Prismic.Predicates.at('document.type', 'movies'))\n    .then(res => res.results);\n\n  // ill iterate over all the movies in the array\n  // then ill extract the ids and return an array of urls with the ids\n  // it'll look something like this [/movie/jkfdlsakjfkld, /movie/klsjiojrlwe]\n  const movieUrls = movieReq.map((movie) => `/movie/${movie.id}`);\n\n  return {\n    paths: movieUrls,\n    fallback: true\n  }\n};\n\nexport async function getStaticProps({ params }) {\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.getByID(params.id)\n    .then(res => res);\n  \n  return {\n    props: {\n      movie: movieReq.data.movies\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}