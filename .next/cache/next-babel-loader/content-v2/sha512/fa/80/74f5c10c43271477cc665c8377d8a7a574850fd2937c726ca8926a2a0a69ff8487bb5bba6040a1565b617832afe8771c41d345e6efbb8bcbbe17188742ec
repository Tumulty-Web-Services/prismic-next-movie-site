{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ptums/Sites/movie-site/pages/index.js\";\n\nconst Prismic = require('@prismicio/client');\n\nimport Image from 'next/image';\nimport Link from 'next/link';\nconst apiEndpoint = \"https://my-first-app1.prismic.io/api\";\nexport default function Home({\n  page,\n  movies\n}) {\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: movies.maps(movie => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"I am number!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 36\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: page.title.value[0].text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), page.content.value.filter(a => a.text !== \"\").map(item => item.type === 'image' ? /*#__PURE__*/_jsxDEV(Image, {\n      src: item.url,\n      width: item.dimensions.width,\n      height: item.dimensions.height,\n      alt: \"movie camera\"\n    }, \"image\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this) : item.type === 'paragraph' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: item.text\n    }, item.text, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 41\n    }, this) : null)]\n  }, void 0, true);\n} // getStaticPaths function is a way to interface with APIs & databases\n// and return content to the component\n\nexport async function getStaticProps() {\n  // create a connection between the prismic js library and my apps api on prismic.io\n  const client = Prismic.client(apiEndpoint); // make a request for some data from my prismic database\n  // I am grabbing the content with type movie_list\n\n  const pageReq = await client.query(Prismic.Predicates.at('document.type', 'movie_list')).then(res => res.results); // make a request for the movie posts from prismic database\n\n  const movieReq = await client.query(Prismic.Predicates.at('document.type', 'movies')).then(res => res.results);\n  return {\n    props: {\n      // I am iterating through the data and boiling it down a bit\n      // so its easier to use in my react component\n      page: pageReq.map(page => page.data.movie_list)[0],\n      movies: movieReq.map(movie => {\n        return {\n          id: movie.id,\n          content: movie.data\n        };\n      })\n    }\n  };\n}","map":{"version":3,"sources":["/Users/ptums/Sites/movie-site/pages/index.js"],"names":["Prismic","require","Image","Link","apiEndpoint","Home","page","movies","console","log","maps","movie","title","value","text","content","filter","a","map","item","type","url","dimensions","width","height","getStaticProps","client","pageReq","query","Predicates","at","then","res","results","movieReq","props","data","movie_list","id"],"mappings":";;;;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAAvB;;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,MAAMC,WAAW,GAAG,sCAApB;AAIA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAd,EAAgC;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,sBACE;AAAA,4BACG;AAAA,gBACIA,MAAM,CAACG,IAAP,CAAaC,KAAD,iBAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAxB;AADJ;AAAA;AAAA;AAAA;AAAA,YADH,eAIE;AAAA,gBAAKL,IAAI,CAACM,KAAL,CAAWC,KAAX,CAAiB,CAAjB,EAAoBC;AAAzB;AAAA;AAAA;AAAA;AAAA,YAJF,EAKGR,IAAI,CAACS,OAAL,CAAaF,KAAb,CAAmBG,MAAnB,CAA0BC,CAAC,IAAIA,CAAC,CAACH,IAAF,KAAW,EAA1C,EAA8CI,GAA9C,CAAmDC,IAAD,IAAWA,IAAI,CAACC,IAAL,KAAc,OAAf,gBAC3D,QAAC,KAAD;AACE,MAAA,GAAG,EAAED,IAAI,CAACE,GADZ;AAEE,MAAA,KAAK,EAAEF,IAAI,CAACG,UAAL,CAAgBC,KAFzB;AAGE,MAAA,MAAM,EAAEJ,IAAI,CAACG,UAAL,CAAgBE,MAH1B;AAIE,MAAA,GAAG,EAAC;AAJN,OAKM,OALN;AAAA;AAAA;AAAA;AAAA,YAD2D,GAQxDL,IAAI,CAACC,IAAL,KAAc,WAAf,gBAA8B;AAAA,gBAAoBD,IAAI,CAACL;AAAzB,OAAQK,IAAI,CAACL,IAAb;AAAA;AAAA;AAAA;AAAA,YAA9B,GAAkE,IARrE,CALH;AAAA,kBADF;AAkBD,C,CAED;AACA;;AACA,OAAO,eAAeW,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG1B,OAAO,CAAC0B,MAAR,CAAetB,WAAf,CAAf,CAFqC,CAIrC;AACA;;AACA,QAAMuB,OAAO,GAAG,MAAMD,MAAM,CAACE,KAAP,CAAa5B,OAAO,CAAC6B,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,YAAvC,CAAb,EACnBC,IADmB,CACdC,GAAG,IAAIA,GAAG,CAACC,OADG,CAAtB,CANqC,CAUrC;;AACA,QAAMC,QAAQ,GAAG,MAAMR,MAAM,CAACE,KAAP,CAAa5B,OAAO,CAAC6B,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,QAAvC,CAAb,EACpBC,IADoB,CACfC,GAAG,IAAIA,GAAG,CAACC,OADI,CAAvB;AAGA,SAAO;AACLE,IAAAA,KAAK,EAAE;AACL;AACA;AACA7B,MAAAA,IAAI,EAAEqB,OAAO,CAACT,GAAR,CAAaZ,IAAD,IAAUA,IAAI,CAAC8B,IAAL,CAAUC,UAAhC,EAA4C,CAA5C,CAHD;AAIL9B,MAAAA,MAAM,EAAE2B,QAAQ,CAAChB,GAAT,CAAcP,KAAD,IAAW;AAC9B,eAAO;AACL2B,UAAAA,EAAE,EAAE3B,KAAK,CAAC2B,EADL;AAELvB,UAAAA,OAAO,EAACJ,KAAK,CAACyB;AAFT,SAAP;AAID,OALO;AAJH;AADF,GAAP;AAaD","sourcesContent":["const Prismic = require('@prismicio/client');\nimport Image from 'next/image';\nimport Link from 'next/link';\nconst apiEndpoint = \"https://my-first-app1.prismic.io/api\";\n\n\n\nexport default function Home({ page, movies }) {\n  console.log(movies);\n  return (\n    <>\n       <ul>\n          {movies.maps((movie) => (<p>I am number!</p>))}\n       </ul>\n      <h1>{page.title.value[0].text}</h1>\n      {page.content.value.filter(a => a.text !== \"\").map((item) => (item.type === 'image') ? (\n        <Image\n          src={item.url}\n          width={item.dimensions.width}\n          height={item.dimensions.height}\n          alt=\"movie camera\"\n          key=\"image\"\n        />\n      ) : (item.type === 'paragraph') ? <p key={item.text}>{item.text}</p>: null)}\n\n    </>\n  )\n}\n\n// getStaticPaths function is a way to interface with APIs & databases\n// and return content to the component\nexport async function getStaticProps() {\n  // create a connection between the prismic js library and my apps api on prismic.io\n  const client = Prismic.client(apiEndpoint);\n\n  // make a request for some data from my prismic database\n  // I am grabbing the content with type movie_list\n  const pageReq = await client.query(Prismic.Predicates.at('document.type', 'movie_list'))\n    .then(res => res.results);\n\n\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.query(Prismic.Predicates.at('document.type', 'movies'))\n    .then(res => res.results);\n  \n  return {\n    props: {\n      // I am iterating through the data and boiling it down a bit\n      // so its easier to use in my react component\n      page: pageReq.map((page) => page.data.movie_list)[0],\n      movies: movieReq.map((movie) => {\n        return {\n          id: movie.id,\n          content:movie.data\n        }\n      })\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}