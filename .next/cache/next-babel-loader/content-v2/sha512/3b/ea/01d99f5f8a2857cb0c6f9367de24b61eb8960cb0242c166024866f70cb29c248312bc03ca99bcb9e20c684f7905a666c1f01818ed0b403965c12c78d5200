{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst Prismic = require('@prismicio/client');\n\nimport Image from 'next/image';\nimport Link from 'next/link';\nconst apiEndpoint = \"https://my-first-app1.prismic.io/api\";\nexport default function Home({\n  page,\n  movies\n}) {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"ul\", {\n      children: movies.map(movie => /*#__PURE__*/_jsx(\"li\", {\n        children: /*#__PURE__*/_jsx(Link, {\n          href: `/movie/${movie.id}`,\n          children: /*#__PURE__*/_jsx(\"a\", {\n            children: movie.content.movies.movie_title.value[0].text\n          })\n        })\n      }, movie.id))\n    }), /*#__PURE__*/_jsx(\"h1\", {\n      children: page.title.value[0].text\n    }), page.content.value.filter(a => a.text !== \"\").map(item => item.type === 'image' ? /*#__PURE__*/_jsx(Image, {\n      src: item.url,\n      width: item.dimensions.width,\n      height: item.dimensions.height,\n      alt: \"movie camera\"\n    }, \"image\") : item.type === 'paragraph' ? /*#__PURE__*/_jsx(\"p\", {\n      children: item.text\n    }, item.text) : null)]\n  });\n} // getStaticPaths function is a way to interface with APIs & databases\n// and return content to the component\n\nexport async function getStaticProps() {\n  // create a connection between the prismic js library and my apps api on prismic.io\n  const client = Prismic.client(apiEndpoint); // make a request for some data from my prismic database\n  // I am grabbing the content with type movie_list\n\n  const pageReq = await client.query(Prismic.Predicates.at('document.type', 'movie_list')).then(res => res.results); // make a request for the movie posts from prismic database\n\n  const movieReq = await client.query(Prismic.Predicates.at('document.type', 'movies')).then(res => res.results);\n  return {\n    props: {\n      // I am iterating through the data and boiling it down a bit\n      // so its easier to use in my react component\n      page: pageReq.map(page => page.data.movie_list)[0],\n      movies: movieReq.map(movie => {\n        return {\n          id: movie.id,\n          content: movie.data\n        };\n      })\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}