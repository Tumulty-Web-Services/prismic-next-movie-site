{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ptums/Sites/movie-site/pages/index.js\";\n\nconst Prismic = require('@prismicio/client');\n\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport Head from 'next/head';\nconst apiEndpoint = \"https://my-first-app1.prismic.io/api\";\nexport default function Home({\n  page,\n  movies\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Movie Site Demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        cname: \"description\",\n        content: \"This is a demo of next.js and prismic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movie Site Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"This is a sample of the page post type from prismic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Everything in \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: 'green'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 25\n      }, this), \" is data from the database\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'green'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: `/movie/${movie.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: movie.content.movies.movie_title.value[0].text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 15\n          }, this)\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: page.title.value[0].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this), page.content.value.filter(a => a.text !== \"\").map(item => item.type === 'image' ? /*#__PURE__*/_jsxDEV(Image, {\n        src: item.url,\n        width: item.dimensions.width,\n        height: item.dimensions.height,\n        alt: \"movie camera\"\n      }, \"image\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this) : item.type === 'paragraph' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.text\n      }, item.text, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 41\n      }, this) : null)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n} // getStaticPaths function is a way to interface with APIs & databases\n// and return content to the component\n\nexport async function getStaticProps() {\n  // create a connection between the prismic js library and my apps api on prismic.io\n  const client = Prismic.client(apiEndpoint); // make a request for some data from my prismic database\n  // I am grabbing the content with type movie_list\n\n  const pageReq = await client.query(Prismic.Predicates.at('document.type', 'movie_list')).then(res => res.results); // make a request for the movie posts from prismic database\n\n  const movieReq = await client.query(Prismic.Predicates.at('document.type', 'movies')).then(res => res.results);\n  return {\n    props: {\n      // I am iterating through the data and boiling it down a bit\n      // so its easier to use in my react component\n      page: pageReq.map(page => page.data.movie_list)[0],\n      movies: movieReq.map(movie => {\n        return {\n          id: movie.id,\n          content: movie.data\n        };\n      })\n    }\n  };\n}","map":{"version":3,"sources":["/Users/ptums/Sites/movie-site/pages/index.js"],"names":["Prismic","require","Image","Link","Head","apiEndpoint","Home","page","movies","color","map","movie","id","content","movie_title","value","text","title","filter","a","item","type","url","dimensions","width","height","getStaticProps","client","pageReq","query","Predicates","at","then","res","results","movieReq","props","data","movie_list"],"mappings":"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","sourcesContent":["const Prismic = require('@prismicio/client');\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport Head from 'next/head';\nconst apiEndpoint = \"https://my-first-app1.prismic.io/api\";\n\n\n\nexport default function Home({ page, movies }) {\n  return (\n    <>\n      <Head>\n        <title>Movie Site Demo</title>\n        <meta cname=\"description\" content=\"This is a demo of next.js and prismic\" />\n      </Head>\n      <h1>Movie Site Demo</h1>\n      <hr />\n      <h2>This is a sample of the page post type from prismic</h2>\n      <h3>Everything in <span style={{color: 'green'}}><u>green</u></span> is data from the database</h3>\n       <div style={{color: 'green'}}>\n       <ul>\n          {movies.map((movie) => (\n            <li key={movie.id}>\n              <Link href={`/movie/${movie.id}`}>\n                <a>\n                {movie.content.movies.movie_title.value[0].text}\n                </a>\n              </Link>\n            </li>\n          ))}\n       </ul>\n      <h1>{page.title.value[0].text}</h1>\n      {page.content.value.filter(a => a.text !== \"\").map((item) => (item.type === 'image') ? (\n        <Image\n          src={item.url}\n          width={item.dimensions.width}\n          height={item.dimensions.height}\n          alt=\"movie camera\"\n          key=\"image\"\n        />\n      ) : (item.type === 'paragraph') ? <p key={item.text}>{item.text}</p>: null)}\n\n       </div>    \n    </>\n  )\n}\n\n// getStaticPaths function is a way to interface with APIs & databases\n// and return content to the component\nexport async function getStaticProps() {\n  // create a connection between the prismic js library and my apps api on prismic.io\n  const client = Prismic.client(apiEndpoint);\n\n  // make a request for some data from my prismic database\n  // I am grabbing the content with type movie_list\n  const pageReq = await client.query(Prismic.Predicates.at('document.type', 'movie_list'))\n    .then(res => res.results);\n\n\n  // make a request for the movie posts from prismic database\n  const movieReq = await client.query(Prismic.Predicates.at('document.type', 'movies'))\n    .then(res => res.results);\n  \n  return {\n    props: {\n      // I am iterating through the data and boiling it down a bit\n      // so its easier to use in my react component\n      page: pageReq.map((page) => page.data.movie_list)[0],\n      movies: movieReq.map((movie) => {\n        return {\n          id: movie.id,\n          content:movie.data\n        }\n      })\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}